[project]
name = "certbot-dns-exonet"
version = "4.0.0"
description = "Exonet DNS Authenticator plugin for Certbot"
authors = [{ name = "Exonet", email = "development@exonet.nl" }]
license = "MIT"
requires-python = ">=3.10,<3.14"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Plugins",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Security",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dynamic = ["dependencies"]
packages = [
    {include = "certbot_dns_exonet"}
]

[project.urls]
homepage = "https://github.com/exonet/certbot-dns-exonet"
repository = "https://github.com/exonet/certbot-dns-exonet"
documentation = "https://github.com/exonet/certbot-dns-exonet"

[tool.poetry.dependencies]
requests = "^2.32.3"
tldextract = "^5.1.3"
acme = "^5.0.0"
exonetapi = "^5.0.0"
certbot = "^4.0.0"

[project.entry-points."certbot.plugins"]
dns-exonet = "certbot_dns_exonet.authenticators.exonet_authenticator:ExonetAuthenticator"

[tool.poetry.group.dev.dependencies]
pre-commit = "4.3.0"
pre-commit-hooks = "6.0.0"
ruff = "0.14.1"
codespell = "2.4.1"
yamllint = "1.37.1"
mypy = "1.18.2"
pylint = "3.3.9"
pytest = "8.4.2"
pytest-cov = "7.0.0"
types-requests = "^2.32.0.20241016"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.10"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T"]

[tool.pylint."MESSAGES CONTROL"]
disable= [
  "too-few-public-methods",
  "too-many-positional-arguments",
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pytest.ini_options]
addopts = "--cov"

[tool.ruff]
target-version = "py39"
lint.select = ["ALL"]
lint.ignore = [
  "ANN401",  # Opinioated warning on disallowing dynamically typed expressions
  "TRY003",  # Allow (long) messages in exceptions.
  "D203",    # Conflicts with other rules
  "D213",    # Conflicts with other rules
  "D417",    # False positives in some occasions
  "PLR2004", # Just annoying, not really useful
  "SLOT000", # Has a bug with enums: https://github.com/astral-sh/ruff/issues/5748

  # Conflicts with the Ruff formatter
  "COM812",
  "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"test_output.py" = ["ERA001", "T201"]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["certbot_dns_exonet"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=2.0.0"]
